#!/usr/bin/env node

const fs = require('fs');
const Web3 = require('web3');
const argv = require('yargs').argv;
const web3 = new Web3();
const DLinked = 'DLinked';
const helpers = require('../helpers/deploy');
const objects = require('../helpers/objects.json');
const TestRPC = require("ethereumjs-testrpc");
let accounts;
let objectsModified = {};
web3.setProvider(TestRPC.provider({total_accounts: 3}));


//web3.setProvider(new Web3.providers.HttpProvider("http://localhost:8545"));
//web3.eth.defaultAccount = "0x523317d8d59990df1724953e647898bd81effe98";

web3.eth.getAccounts(function (err, accs) {
    if (err) throw new Error(err);
    accounts = accs;
    web3.eth.defaultAccount = accounts[0];
});

const deploy = (c, cb) => {
    helpers.deploy(web3, c, (err, data) => {

        if (err) {
            return cb(err);
        }

        Object.defineProperty(objectsModified, c, {
            value: data,
            writable: true,
            configurable: true,
            enumerable: true
        });
        cb('', data);
    })
};

if (argv.deployAll) {
    setTimeout(() => {
        deploy(DLinked, (err, libAddr) => {
            let deployed = 1;
            for (let contract of Object.keys(objects)) {
                helpers.bindLib(contract, libAddr, DLinked);
                deploy(contract, (er, fin) => {
                    if(deployed === Object.keys(objects).length){
                        console.log(objectsModified);
                        helpers.runMigrations(web3, 1, 1000);
                        return;
                    }

                    if(fin) {
                        deployed++;
                    }
                });
            }
        });
    }, 3000);
}